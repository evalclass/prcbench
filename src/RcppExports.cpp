// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// perfmeas_prec_recall
Rcpp::List perfmeas_prec_recall(const Rcpp::IntegerVector& order, const Rcpp::IntegerVector& labels, int vec_size);
RcppExport SEXP _prcbench_perfmeas_prec_recall(SEXP orderSEXP, SEXP labelsSEXP, SEXP vec_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type order(orderSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type vec_size(vec_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(perfmeas_prec_recall(order, labels, vec_size));
    return rcpp_result_gen;
END_RCPP
}
// perfmeas_trap_rule
float perfmeas_trap_rule(const Rcpp::NumericVector& x, const Rcpp::NumericVector& y, int vec_size);
RcppExport SEXP _prcbench_perfmeas_trap_rule(SEXP xSEXP, SEXP ySEXP, SEXP vec_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type vec_size(vec_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(perfmeas_trap_rule(x, y, vec_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_prcbench_perfmeas_prec_recall", (DL_FUNC) &_prcbench_perfmeas_prec_recall, 3},
    {"_prcbench_perfmeas_trap_rule", (DL_FUNC) &_prcbench_perfmeas_trap_rule, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_prcbench(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
